/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsfileutils.h                                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/




class QgsFileUtils
{
%Docstring
Class for file utilities.

.. versionadded:: 3.0
%End

%TypeHeaderCode
#include "qgsfileutils.h"
%End
  public:

    static QString representFileSize( qint64 bytes );
%Docstring
Returns the human size from bytes
%End


    static QStringList extensionsFromFilter( const QString &filter );
%Docstring
Returns a list of the extensions contained within a file ``filter`` string.
E.g. a ``filter`` of "GeoTIFF Files (*.tiff *.tif)" would return a list
containing "tiff", "tif". The initial '.' is stripped off the extension.

.. seealso:: :py:func:`ensureFileNameHasExtension`

.. seealso:: :py:func:`addExtensionFromFilter`
%End

    static QString wildcardsFromFilter( const QString &filter );
%Docstring
Given a ``filter`` string like "GeoTIFF Files (*.tiff *.tif)", extracts
the wildcard portion of this filter (i.e. "*.tiff *.tif").

.. versionadded:: 3.18
%End

    static bool fileMatchesFilter( const QString &fileName, const QString &filter );
%Docstring
Returns ``True`` if the given ``fileName`` matches a file ``filter`` string.

E.g a filter of "GeoTIFF Files (*.tiff *.tif)" would return ``True`` for a ``fileName``
of "/home/test.tif", or ``False`` for "/home/test.jpg".

.. versionadded:: 3.18
%End

    static QString ensureFileNameHasExtension( const QString &fileName, const QStringList &extensions );
%Docstring
Ensures that a ``fileName`` ends with an extension from the provided list of
``extensions``.

E.g. if extensions contains "tif" and "tiff", then a ``fileName`` of
"d:/my_file" will return "d:/my_file.tif". A ``fileName`` of
"d:/my_file.TIFF" or "d:/my_file.TIF" will be returned unchanged.

.. seealso:: :py:func:`extensionsFromFilter`

.. seealso:: :py:func:`addExtensionFromFilter`
%End

    static QString addExtensionFromFilter( const QString &fileName, const QString &filter );
%Docstring
Ensures that a ``fileName`` ends with an extension from the specified ``filter``
string.

E.g. a ``fileName`` of "d:/my_file" with a filter of "GeoTIFF Files (*.tiff *.tif)"
will return "d:/my_file.tif", where as ``fileName`` of "d:/my_file.TIFF" or "d:/my_file.TIF"
will be returned unchanged.

.. seealso:: :py:func:`extensionsFromFilter`

.. seealso:: :py:func:`ensureFileNameHasExtension`
%End

    static QString stringToSafeFilename( const QString &string );
%Docstring
Converts a ``string`` to a safe filename, replacing characters which are not safe
for filenames with an '_' character.

.. warning::

   This method strips slashes from the filename, so it is safe to call with file names only, not complete paths.
%End

    static QString findClosestExistingPath( const QString &path );
%Docstring
Returns the top-most existing folder from ``path``. E.g. if ``path`` is "/home/user/projects/2018/P4343"
and "/home/user/projects" exists but no "2018" subfolder exists, then the function will return "/home/user/projects".

.. versionadded:: 3.2
%End

    static QStringList findFile( const QString &file, const QString &basepath = QString(), int maxClimbs = 4, int searchCeiling = 4, const QString &currentDir = QString() );
%Docstring
Will check ``basepath`` in an outward spiral up to ``maxClimbs`` levels to check if ``file`` exists.

:param file: Name or full path of the file to find
:param basepath: current basepath of the file, needed if only the name is specified in file
:param maxClimbs: limit the number of time the search can move up from the basepath
:param searchCeiling: limits where in the folder hierarchy the search can be performed, 1 = root/drive, 2 = first folder level, 3 = sub folders ( Unix: /usr/bin, Win: C:/Users/Admin ), etc.
:param currentDir: alternative default directory to override the actual current directory during the search

:return: List of strings of the first matching path in unix format.

.. versionadded:: 3.12
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsfileutils.h                                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
